# .github/workflows/main.yml
name: ToDo List App CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  PYTHON_VERSION: '3.9' # Keep consistent with Dockerfile
  DOCKER_IMAGE_NAME: todo-list-app # Specific to this project
  DOCKER_REGISTRY: ghcr.io

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install all dependencies from requirements.txt
        pip install -r requirements.txt

    - name: Lint with Flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with Pytest
      run: |
        pytest # Runs the tests defined in test_app.py

  build-and-push-docker:
    needs: build-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker image
      run: |
        # Build the image based on the Dockerfile in the root
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Push Docker image
      run: |
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production # Requires manual approval or other protection rules if configured

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Simulate Deployment to Production
      run: |
        echo "Beginning simulated deployment of ToDo List App (Image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}) to production..."
        echo "---"
        echo "This is where you would put your actual deployment commands, for example:"
        echo "1. SSH to a server and run 'docker pull ...' and 'docker run ...'"
        echo "2. Use a cloud provider's CLI (e.g., 'az webapp deploy', 'gcloud run deploy', 'aws ecs update-service')"
        echo "3. Update a Kubernetes deployment with the new image tag."
        echo ""
        echo "Example for a simple Docker host (replace with your actual server details and secrets):"
        # echo "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} \\"
        # echo "  \"docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:latest && \\"
        # echo "  docker stop todo-app-container || true && \\"
        # echo "  docker rm todo-app-container || true && \\"
        # echo "  docker run -d --name todo-app-container -p 80:5000 ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:latest\""
        echo "---"
        echo "Deployment simulation complete!"
      env:
        # Placeholder for real secrets. You would define these in GitHub Repository Secrets.
        # PROD_SSH_USER: ${{ secrets.PROD_SSH_USER }}
        # PROD_SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
        # PROD_DB_URL: ${{ secrets.PROD_DB_URL }} # Example: for database connection strings
        SIMULATED_SECRET: "This is a dummy secret for the simulation"
